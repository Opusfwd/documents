"use strict";(self.webpackChunksmart_documents=self.webpackChunksmart_documents||[]).push([[2744],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=m(e,["components","mdxType","originalType","parentName"]),u=s(n),g=r,d=u["".concat(l,".").concat(g)]||u[g]||p[g]||o;return n?a.createElement(d,i(i({ref:t},c),{},{components:n})):a.createElement(d,i({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=g;var m={};for(var l in t)hasOwnProperty.call(t,l)&&(m[l]=t[l]);m.originalType=e,m[u]="string"==typeof e?e:r,i[1]=m;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},1097:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>m,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const o={tag:"technology/git",order:5,title:"git rebase \u64cd\u4f5c\u6307\u5357",group:{title:"git"},nav:{title:"\u6280\u672f"}},i="rebase before merge",m={unversionedId:"git/git-rebase",id:"git/git-rebase",title:"git rebase \u64cd\u4f5c\u6307\u5357",description:"\u9879\u76ee\u7684\u63d0\u4ea4\u6574\u6d01\u4e14\u6613\u7ba1\u7406",source:"@site/documents/standard/git/git-rebase.md",sourceDirName:"git",slug:"/git/git-rebase",permalink:"/standard/git/git-rebase",draft:!1,tags:[],version:"current",frontMatter:{tag:"technology/git",order:5,title:"git rebase \u64cd\u4f5c\u6307\u5357",group:{title:"git"},nav:{title:"\u6280\u672f"}},sidebar:"api",previous:{title:"git commit \u89c4\u8303\u548c\u5e38\u89c1\u9519\u8bef",permalink:"/standard/git/git-commit"},next:{title:"git \u6587\u4ef6\u56de\u6eda",permalink:"/standard/git/git-rollback"}},l={},s=[{value:"\u5c06\u5f53\u524d\u5206\u652f\u7684\u591a\u4e2a commit \u5408\u5e76\u4e3a\u4e00\u4e2a",id:"\u5c06\u5f53\u524d\u5206\u652f\u7684\u591a\u4e2a-commit-\u5408\u5e76\u4e3a\u4e00\u4e2a",level:2},{value:"\u6b65\u9aa4",id:"\u6b65\u9aa4",level:3},{value:"\u540c\u6b65\u7236\u5206\u652f\u7684\u4ee3\u7801\u5230\u81ea\u5206\u652f",id:"\u540c\u6b65\u7236\u5206\u652f\u7684\u4ee3\u7801\u5230\u81ea\u5206\u652f",level:2},{value:"\u6b65\u9aa4",id:"\u6b65\u9aa4-1",level:3},{value:"\u600e\u4e48\u5224\u65ad\u662f\u5426\u9700\u8981\u505a\u8fd9\u4e2a\u52a8\u4f5c",id:"\u600e\u4e48\u5224\u65ad\u662f\u5426\u9700\u8981\u505a\u8fd9\u4e2a\u52a8\u4f5c",level:3},{value:"\u6ce8\u610f\u70b9\uff1a",id:"\u6ce8\u610f\u70b9",level:3}],c={toc:s},u="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"rebase-before-merge"},"rebase before merge"),(0,r.kt)("a",{name:"OOwK0"}),(0,r.kt)("h1",{id:"\u76ee\u6807"},"\u76ee\u6807"),(0,r.kt)("p",null,"\u9879\u76ee\u7684\u63d0\u4ea4\u6574\u6d01\u4e14\u6613\u7ba1\u7406"),(0,r.kt)("a",{name:"Mh0gH"}),(0,r.kt)("h1",{id:"\u573a\u666f"},"\u573a\u666f\uff1a"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\u5c06\u5f53\u524d\u5206\u652f\u7684\u591a\u4e2a commit \u5408\u5e76\u4e3a\u4e00\u4e2a"),(0,r.kt)("li",{parentName:"ol"},"\u540c\u6b65\u7236\u5206\u652f\u7684\u4ee3\u7801\u5230\u81ea\u5206\u652f")),(0,r.kt)("a",{name:"NfIwa"}),(0,r.kt)("h2",{id:"\u5c06\u5f53\u524d\u5206\u652f\u7684\u591a\u4e2a-commit-\u5408\u5e76\u4e3a\u4e00\u4e2a"},"\u5c06\u5f53\u524d\u5206\u652f\u7684\u591a\u4e2a commit \u5408\u5e76\u4e3a\u4e00\u4e2a"),(0,r.kt)("a",{name:"cFYSA"}),(0,r.kt)("h3",{id:"\u6b65\u9aa4"},"\u6b65\u9aa4"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\u89c2\u5bdf change \uff08 gitlab \u53d1\u8d77\u4e00\u4e2a merge request"),(0,r.kt)("li",{parentName:"ol"},"git rebase -i HEAD \uff5e n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"(feature/a)$ git rebase -i HEAD~2\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"  1 pick 2ef8c98 config: change webpack config\n  2 pick a8fed52 feature: remove console\n  3\n  4 # Rebase 99e7e26..a8fed52 onto 99e7e26 (2 commands)\n  5 #\n  6 # Commands:\n  7 # p, pick <commit> = use commit\n  8 # r, reword <commit> = use commit, but edit the commit message\n  9 # e, edit <commit> = use commit, but stop for amending\n 10 # s, squash <commit> = use commit, but meld into previous commit\n 11 # f, fixup <commit> = like \"squash\", but discard this commit's log message\n 12 # x, exec <command> = run command (the rest of the line) using shell\n 13 # d, drop <commit> = remove commit\n 14 # l, label <label> = label current HEAD with a name\n 15 # t, reset <label> = reset HEAD to a label\n 16 # m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]\n 17 # .       create a merge commit using the original merge commit's\n 18 # .       message (or the oneline, if no original merge commit was\n 19 # .       specified). Use -c <commit> to reword the commit message.\n 20 #\n 21 # These lines can be re-ordered; they are executed from top to bottom.\n 22 #\n 23 # If you remove a line here THAT COMMIT WILL BE LOST.\n 24 #\n 25 #\u203a  However, if you remove everything, the rebase will be aborted.\n 26 #\n 27 #\u203a\n 28 # Note that empty commits are commented out\n~\n~\n~\n~\n~\n~\n~\n~\n~\n")),(0,r.kt)("p",null,"2.1 \u4f7f\u7528 vim \u8bed\u6cd5\u6574\u7406\u63d0\u4ea4\u4fe1\u606f",(0,r.kt)("br",null),"\xa0 \xa0 \xa02.1.1 \u6309 exit \u5207\u6362\u4e3a vim \u547d\u4ee4\u6a21\u5f0f",(0,r.kt)("br",null),"\xa0 \xa0 \xa02.1.2 \u8f93\u5165 :2,2s#pick#s(\u5c06 2 \uff5e n \u884c\u7684 pick \u5b57\u7b26\u66ff\u6362\u4e3a s)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"  1 pick 2ef8c98 config: change webpack config\n  2 s a8fed52 feature: remove console\n  3\n  4 # Rebase 99e7e26..a8fed52 onto 99e7e26 (2 commands)\n  5 #\n  6 # Commands:\n  7 # p, pick <commit> = use commit\n  8 # r, reword <commit> = use commit, but edit the commit message\n  9 # e, edit <commit> = use commit, but stop for amending\n 10 # s, squash <commit> = use commit, but meld into previous commit\n 11 # f, fixup <commit> = like \"squash\", but discard this commit's log message\n 12 # x, exec <command> = run command (the rest of the line) using shell\n 13 # d, drop <commit> = remove commit\n 14 # l, label <label> = label current HEAD with a name\n 15 # t, reset <label> = reset HEAD to a label\n 16 # m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]\n 17 # .       create a merge commit using the original merge commit's\n 18 # .       message (or the oneline, if no original merge commit was\n 19 # .       specified). Use -c <commit> to reword the commit message.\n 20 #\n 21 # These lines can be re-ordered; they are executed from top to bottom.\n 22 #\n 23 # If you remove a line here THAT COMMIT WILL BE LOST.\n 24 #\n 25 #\u203a  However, if you remove everything, the rebase will be aborted.\n 26 #\n 27 #\u203a\n 28 # Note that empty commits are commented out\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n COMMAND  SPELL [EN] \u203a \u16a0 refactor/change-to-typescript \u203a git-rebase-todo[+]                                                                                                                                 \u2039 gitrebase \u2039 utf-8[unix] \u2039 100% \u2630   28/28 \u33d1 : 44 \u2039 \u2632 [27]trailing\n:2,2s#pick#s\n")),(0,r.kt)("p",null,"2.1.3 \u8f93\u5165 :wq\uff08write & quit\uff09"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"  1 pick 2ef8c98 config: change webpack config\n  2 s a8fed52 feature: remove console\n  3\n  4 # Rebase 99e7e26..a8fed52 onto 99e7e26 (2 commands)\n  5 #\n  6 # Commands:\n  7 # p, pick <commit> = use commit\n  8 # r, reword <commit> = use commit, but edit the commit message\n  9 # e, edit <commit> = use commit, but stop for amending\n 10 # s, squash <commit> = use commit, but meld into previous commit\n 11 # f, fixup <commit> = like \"squash\", but discard this commit's log message\n 12 # x, exec <command> = run command (the rest of the line) using shell\n 13 # d, drop <commit> = remove commit\n 14 # l, label <label> = label current HEAD with a name\n 15 # t, reset <label> = reset HEAD to a label\n 16 # m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]\n 17 # .       create a merge commit using the original merge commit's\n 18 # .       message (or the oneline, if no original merge commit was\n 19 # .       specified). Use -c <commit> to reword the commit message.\n 20 #\n 21 # These lines can be re-ordered; they are executed from top to bottom.\n 22 #\n 23 # If you remove a line here THAT COMMIT WILL BE LOST.\n 24 #\n 25 #\u203a  However, if you remove everything, the rebase will be aborted.\n 26 #\n 27 #\u203a\n 28 # Note that empty commits are commented out\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n COMMAND  SPELL [EN] \u203a \u16a0 refactor/change-to-typescript \u203a git-rebase-todo[+]                                                                                                                                 \u2039 gitrebase \u2039 utf-8[unix] \u2039 100% \u2630   28/28 \u33d1 : 44 \u2039 \u2632 [27]trailing\n:wq\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"git push -f")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"(feature/a)$ git push -f\n")),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},"Merge on gitlab")),(0,r.kt)("a",{name:"mBXpO"}),(0,r.kt)("h2",{id:"\u540c\u6b65\u7236\u5206\u652f\u7684\u4ee3\u7801\u5230\u81ea\u5206\u652f"},"\u540c\u6b65\u7236\u5206\u652f\u7684\u4ee3\u7801\u5230\u81ea\u5206\u652f"),(0,r.kt)("a",{name:"AFxQH"}),(0,r.kt)("h3",{id:"\u6b65\u9aa4-1"},"\u6b65\u9aa4"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"checkout parent branch:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"(feature/a)$ git checkout presit\n(prest)$\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"git pull")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"(presit)$ git pull\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"checkout children branch")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"(presit)$ git checkout feature/a\n(feature/a)$\n")),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},"git rebase parent branch")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"(feature/a)$ git rebase preist\n")),(0,r.kt)("p",null,"4.1 \u5982\u9047\u51b2\u7a81: \u89e3\u51b3\u51b2\u7a81\u5e76\u7ee7\u7eed\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"(feature/a)$ git rebase --continue\n")),(0,r.kt)("ol",{start:5},(0,r.kt)("li",{parentName:"ol"},"git push -f")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"(feature/a)$ git push -f\n")),(0,r.kt)("a",{name:"ZivGs"}),(0,r.kt)("h3",{id:"\u600e\u4e48\u5224\u65ad\u662f\u5426\u9700\u8981\u505a\u8fd9\u4e2a\u52a8\u4f5c"},"\u600e\u4e48\u5224\u65ad\u662f\u5426\u9700\u8981\u505a\u8fd9\u4e2a\u52a8\u4f5c"),(0,r.kt)("p",null,"merge request \xa0 \u4e0a\u663e\u793a (xxx commit behind)"),(0,r.kt)("a",{name:"JP9Rb"}),(0,r.kt)("h3",{id:"\u6ce8\u610f\u70b9"},"\u6ce8\u610f\u70b9\uff1a"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\u573a\u666f 2 \u53ea\u80fd\u5b57\u5206\u652f rebase \u7236\u5206\u652f\uff0c\u6bd4\u5982\u5206\u652f feature/a \u4ece presit \u5207\u6362\u51fa\u6765:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"(presit)$ git checkout -b feature/a\n(feature/a)$\n")),(0,r.kt)("p",null,"\u6b63\u786e\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"(feature/a) $ git rebase presit\n")),(0,r.kt)("p",null,"\u9519\u8bef\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"(feature/a) $ git rebase sit-jp\n")))}p.isMDXComponent=!0}}]);